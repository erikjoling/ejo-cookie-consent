{"version":3,"sources":["1-use-strict.js","cookie-consent.js"],"names":["ejoCookieConsent","$","priv","publ","debugMode","consentDuration","containerID","containerButtonClass","cookieName","ejoccLocalization","cookieActiveValue","getCookie","name","nameEQ","ca","document","cookie","split","i","length","c","charAt","substring","indexOf","setCookie","date","Date","setTime","getTime","toGMTString","cookieConsentIsGiven","argument","console","log","onShowCookieConsentBlock","consentBlockHeight","innerHeight","addClass","css","hideCookieConsentBlock","slideToggle","removeClass","init","click","jQuery","ready"],"mappings":"AAAA,aCGA,IAAAA,iBAAA,SAAAC,GASA,IAAAC,KACAC,KAoFA,OA5EAD,EAAAE,WAAA,EACAF,EAAAG,gBAAA,GACAH,EAAAI,YAAA,uBACAJ,EAAAK,qBAAA,6BACAL,EAAAM,WAAAC,kBAAAD,WACAN,EAAAQ,kBAAA,IAGAR,EAAAS,UAAA,SAAAC,GAGA,IAFA,IAAAC,EAAAD,EAAA,IACAE,EAAAC,SAAAC,OAAAC,MAAA,KACAC,EAAA,EAAAA,EAAAJ,EAAAK,OAAAD,IAAA,CAEA,IADA,IAAAE,EAAAN,EAAAI,GACA,KAAAE,EAAAC,OAAA,IAAAD,EAAAA,EAAAE,UAAA,EAAAF,EAAAD,QACA,GAAA,GAAAC,EAAAG,QAAAV,GAAA,OAAAO,EAAAE,UAAAT,EAAAM,OAAAC,EAAAD,QAEA,OAAA,MAIAjB,EAAAsB,UAAA,WAGA,IAAAtB,EAAAE,UAAA,CAGA,IAAAqB,EAAA,IAAAC,KACAD,EAAAE,QAAAF,EAAAG,UAAA,GAAA1B,EAAAG,gBAAA,GAAA,GAAA,KAGAU,SAAAC,OAAAd,EAAAM,WAAA,IAAAN,EAAAQ,kBAAA,aAAAe,EAAAI,cAAA,aAKA3B,EAAA4B,qBAAA,SAAAC,GAEA,OADAC,QAAAC,IAAA,wBACA/B,EAAAS,UAAAT,EAAAM,aAAAN,EAAAQ,mBAGAR,EAAAgC,yBAAA,WAEA,IAAAC,EAAAlC,EAAA,IAAAC,EAAAI,aAAA8B,cAGAnC,EAAA,QAAAoC,SAAA,qBACApC,EAAA,QAAAqC,IAAA,cAAAH,EAAA,OAGAjC,EAAAqC,uBAAA,WAGAtC,EAAA,IAAAC,EAAAI,aAAAkC,YAAA,WAEAvC,EAAA,QAAAwC,YAAA,qBACAxC,EAAA,QAAAqC,IAAA,cAAA,SAIApC,EAAAsB,aAGArB,EAAAuC,KAAA,WAGAxC,EAAA4B,wBACA5B,EAAAgC,2BAIAjC,EAAA,IAAAC,EAAAK,sBAAAoC,MAAAzC,EAAAqC,yBAMApC,EA9FA,CAgGAyC,QAGAA,OAAA7B,UAAA8B,MAAA,SAAA5C,GACAD,iBAAA0C","file":"plugin.min.js","sourcesContent":["\"use strict\";\r\n","// EJO Cookie Consent\r\n// Inspired by the Ilmenite Cookie Banner of Bernskiold Media\r\n\r\nvar ejoCookieConsent = (function ($) {\r\n\r\n    /**\r\n     * Module pattern\r\n     *\r\n     * Keep stuff out of the global namespace\r\n     * By using private and public object there is no need to \r\n     * map properties and methods. \r\n     */\r\n    var priv = {}; // Store private properties and methods\r\n    var publ = {}; // Store public properties and methods\r\n\r\n    /**\r\n     * Note: erasing cookie with javascript has no use because this script is not\r\n     *       added to the site when the cookie is present\r\n     */\r\n\r\n    // Variables\r\n    priv.debugMode            = false;                          // Debug Mode: true will disable the cookie, allowing you to debug the banner.\r\n    priv.consentDuration      = 30;                            // Duration in Days: The number of days before the cookie should expire.\r\n    priv.containerID          = 'cookie-consent-block';        // The ID of the notice container div\r\n    priv.containerButtonClass = 'close-cookie-consent-block';  // The Class of the accept-button\r\n    priv.cookieName           = ejoccLocalization.cookieName;  // The name of the cookie\r\n    priv.cookieActiveValue    = '1';                           // The active value of the cookie.\r\n\r\n    // Get Cookie helper\r\n    priv.getCookie = function(name) {\r\n        var nameEQ = name + \"=\";\r\n        var ca = document.cookie.split(';');\r\n        for(var i=0;i < ca.length;i++) {\r\n            var c = ca[i];\r\n            while (c.charAt(0)==' ') c = c.substring(1,c.length);\r\n            if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);\r\n        }\r\n        return null;\r\n    };\r\n\r\n    // Set the cookie\r\n    priv.setCookie = function() {\r\n\r\n        // If no debug mode, set the cookie\r\n        if ( ! priv.debugMode ) {\r\n\r\n            // Set the consent duration into a cookie date string\r\n            var date = new Date();\r\n            date.setTime(date.getTime()+(priv.consentDuration*24*60*60*1000));\r\n\r\n            // Set the actual cookie\r\n            document.cookie = priv.cookieName + '=' + priv.cookieActiveValue + '; expires=' + date.toGMTString() + '; path=/';\r\n        }\r\n    };\r\n\r\n    // Check if cookie consent\r\n    priv.cookieConsentIsGiven = function(argument) {\r\n        console.log('cookieConsentIsGiven');\r\n        return (priv.getCookie(priv.cookieName) == priv.cookieActiveValue)\r\n    };\r\n\r\n    priv.onShowCookieConsentBlock = function() {\r\n        // Get the height of the consent block\r\n        var consentBlockHeight = $('#' + priv.containerID).innerHeight();\r\n\r\n        // Add class to body\r\n        $('body').addClass('has-cookie-banner');\r\n        $('body').css('padding-top', consentBlockHeight + 'px');\r\n    };\r\n\r\n    priv.hideCookieConsentBlock = function(){\r\n\r\n        // Hide the cookie banner\r\n        $( '#' + priv.containerID).slideToggle(function() {\r\n            // Remove cookie banner class\r\n            $('body').removeClass('has-cookie-banner');\r\n            $('body').css('padding-top', '0px');\r\n        });\r\n\r\n        // Set the cookie\r\n        priv.setCookie();\r\n    };\r\n\r\n    publ.init = function() {\r\n\r\n        // Do stuff if no consent for cookie yet\r\n        if( ! priv.cookieConsentIsGiven() ){\r\n            priv.onShowCookieConsentBlock();\r\n        }\r\n\r\n        // Add event handler to close button\r\n        $( '.' + priv.containerButtonClass).click(priv.hideCookieConsentBlock);\r\n    };\r\n\r\n    /**\r\n     * Share public properties and methods with the global namespace\r\n     */\r\n    return publ;\r\n\r\n})(jQuery);\r\n\r\n\r\njQuery(document).ready(function($) {\r\n    ejoCookieConsent.init();\r\n});"]}